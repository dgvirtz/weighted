load "all-subgroups-Q-3.magma";

Kab := FixedField(KC,Nfix);
K := NumberField(Kab);
sx3 := Sqrt(K!3)/Root(K!3,3);
cb2 := Root(K!2,3);
i := Sqrt(K!-1);
art := rec*ArtinMap(Kab);
cub := [g: g in Gal| Order(g) eq 3 and ([s(sx3),s(cb2),s(i)] eq [sx3,ed^2*cb2,i] where s is art(g @@ redNGal))][1]
        @ inclGal;
fix := [g: g in Gal| Order(g) eq 6 and ([s(sx3),s(cb2),s(i)] eq [ed*sx3,cb2,-i] where s is art(g @@ redNGal))][1]
        @ inclGal;
s1 := G.(Ngens(G)-3);
s2 := G.(Ngens(G)-2);
s3 := G.(Ngens(G)-1);
conj := G.Ngens(G);

//generic variables for generic coefficients
_<d1,d2,d3>:=PolynomialRing(K,3);

AbG := sub<G|s1,s2,s3,fix,cub>;
AbGfin := isoGPC(AbG);
Ab := AbelianGroup([6,6,6,6,3]);
isoAb := hom<AbGfin->AbG|[isoGPCinv(g):g in PCGenerators(AbGfin)]>*hom<AbG->Ab|[Ab.j:j in [1..5]]>;

//reimplementing Bright's method to find a unique representative group for each case.
CanonicalConjugate := function(Mv)
    hc := Mv;
    hc[1] := RowSubmatrix(HermiteForm(VerticalJoin(Mv[1],DiagonalMatrix([6,6,6,6,3]))),5);
    if #Mv eq 2 then
        N := HermiteForm(VerticalJoin(Mv[1],2*IdentityMatrix(Z,5)));
        for i := 1 to 5 do
            hc[2] -:= (hc[2][1,i] div N[i,i])*N[i];
        end for;
    end if;
    return hc;
end function;

CanonicalPermute := function(Mv)
    perms := [];
    S3 := SymmetricGroup(3);
    perms := [CanonicalConjugate([* x*P: x in Mv *]) : s in S3|
                true where P is DiagonalJoin(PermutationMatrix(Z,s),IdentityMatrix(Z,2))];
    _,min := Min([Sprint(h) : h in perms]);
    return perms[min];
end function;

MatrixToSubgroup := function(Mv)
    return sub<G|[s1^r[1]*s2^r[2]*s3^r[3]*fix^r[4]*cub^r[5]: r in RowSequence(Mv[1])]
            cat (#Mv eq 1 select [] else [conj*s1^(Mv[2][1,1])*s2^(Mv[2][1,2])*s3^(Mv[2][1,3])*fix^(Mv[2][1,4])*cub^(Mv[2][1,5])])>;
end function;

SubgroupToMatrixAb := function(H)
    return Matrix([Eltseq(Ab!h):h in Generators(H)] cat [[0,0,0,0,0]]);
end function;

SubgroupToMatrix := function(H)
    Hab := isoAb((H @ isoGPC) meet AbGfin);
    M := Matrix([Eltseq(Ab!h):h in Generators(Hab)] cat [[0,0,0,0,0]]);
    rest := {x @ isoGPCinv:x in isoGPC(H)|isoGPC(conj)*x in AbGfin};
    if IsEmpty(rest) then
        return [* M *];
    else
        h5 := Rep(rest); 
        return [* M, Matrix([Eltseq(isoAb(isoGPC(conj*h5)))]) *];
    end if;
end function;

IsRational := function(M)
    return RowSubmatrix(HermiteForm(ColumnSubmatrix(M,4,2)),2) eq IdentityMatrix(Z,2);
end function;

//// list all subgroups defining surfaces over Q
ListAllSubgroups := function() 
    groups := {};
    abclasses := [H`subgroup: H in Subgroups(Ab)];
    abclasses := Setseq({M: H in abclasses|IsRational(M) where M is CanonicalPermute([*SubgroupToMatrixAb(H)*])[1]});
    #abclasses;
    for M in abclasses do
        Index(abclasses,M);
        N := HermiteForm(VerticalJoin(M,2*IdentityMatrix(Z,5)));
        groups := groups join {VerticalJoin(Mv[1],Mv[2]) where Mv is CanonicalPermute([*M , Matrix([[v1,v2,v3,v4,v5]])*])
                             : v1 in [0..N[1,1]], v2 in [0..N[2,2]], v3 in [0..N[3,3]], v4 in [0..N[4,4]], v5 in [0..N[5,5]]};
    end for;
    return [[*RowSubmatrix(Mv,5), RowSubmatrix(Mv,6,1) *]: Mv in groups];
end function;

ListAllSubgroupsFromFile := function()
    return [MatrixToSubgroup(Mv):Mv in allsubgroupsQ3];
end function;

GenericExample := function(H)
    Mv := SubgroupToMatrix(H);
    N := Matrix([[m[1], m[2], m[3], m[4], m[5] div 2]
        cat [#Mv eq 1 select 0 else -(m*Transpose(ChangeRing(Mv[2], Zd)))[1]]
        :m in RSpace(Zd,5) | IsDivisibleBy(Z!m[5],2) and IsZero(m*Transpose(ChangeRing(Mv[1], Zd)))]);
    if #Mv eq 1 then
        N := VerticalJoin(N,Matrix([[Zd|0,0,0,0,0,2]]));
    end if;
    N := HermiteForm(VerticalJoin(ChangeRing(N,Z),DiagonalMatrix([6,6,6,6,3,6])));
    ground := [K|sx3^N[4,4]*cb2^N[4,5]*(1+ed)^N[4,6],cb2^N[5,5]*(1+ed)^N[5,6],(1+ed)^N[6,6]];
    
    constraints := ChangeRing(RowSubmatrix(N,3),Q);
    //the modulus of the power of 1+ed is captured with the exponent for sx3 (*).
    AddColumn(~constraints,3,6,4);
    //we use 3 instead of sx3 and ed instead of w12 by tripling the exponents (*)
    MultiplyColumn(~constraints,2,5);
    MultiplyColumn(~constraints,3,6);
    //each of the rows has to be a sixth power.
    generic := ColumnSubmatrix(EchelonForm(HorizontalJoin(constraints,ScalarMatrix(Q,3,6))),4,6);
    generic := ChangeRing(generic, Z);
    a := [3^(-r[1] mod 6)*2^(-r[2] mod 6)*ed^(-r[3] mod 6)*d1^(r[4] mod 6)*d2^(r[5] mod 6)*d3^(r[6] mod 6): r in RowSequence(generic)];
    return a, constraints, ground;
end function;
